generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Cliente - puede usar alias para privacidad
model Contact {
  id            Int                 @id @default(autoincrement())
  alias         String              // Nombre o alias del cliente
  realName      String?             // Nombre real (opcional)
  number        String              @unique // WhatsApp, teléfono, etc
  email         String?
  privacyMode   Boolean             @default(true) // true = usar alias
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  messages      Message[]
  sessions      Session[]
  consultations Consultation[]
  surveys       SatisfactionSurvey[]
  orders        Order[]
}

// Asesores/Empleados
model Advisor {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  role          String         @default("advisor") // advisor, supervisor
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  
  consultations Consultation[]
  escalations   Escalation[]   @relation("AssignedTo")
}

// Sesiones de conversación continua (historial con Gemini)
model Session {
  id              Int      @id @default(autoincrement())
  contact         Contact  @relation(fields: [contactId], references: [id])
  contactId       Int
  channel         String   // whatsapp, web, phone, presencial
  status          String   @default("active") // active, closed
  geminiThreadId  String?  // ID de thread de Gemini para persistencia
  startedAt       DateTime @default(now())
  closedAt        DateTime?
  // Handoff fields: control manual por agentes
  handoff          Boolean  @default(false)
  assignedAgentId  String?
  handoffStartedAt DateTime?
  handoffReason    String?
  
  messages        Message[]
  consultations   Consultation[]
  orders          Order[]
}

// Mensajes individuales dentro de sesiones
model Message {
  id         Int      @id @default(autoincrement())
  content    String
  direction  String   // IN, OUT
  contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  Int?
  session    Session? @relation(fields: [sessionId], references: [id])
  sessionId  Int?
  createdAt  DateTime @default(now())
}

// Consultas clasificadas
model Consultation {
  id          Int       @id @default(autoincrement())
  contact     Contact   @relation(fields: [contactId], references: [id])
  contactId   Int
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
  advisor     Advisor?  @relation(fields: [advisorId], references: [id])
  advisorId   Int?
  
  category    String    // producto, recomendacion, soporte_uso, queja_sugerencia
  topic       String?   // Tema específico
  description String    // Consulta inicial
  response    String?   // Respuesta del asesor
  status      String    @default("pending") // pending, in_progress, resolved, escalated
  priority    String    @default("normal") // low, normal, high
  
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
  
  escalation  Escalation?
  survey      SatisfactionSurvey?
}

// Escalamientos a supervisor
model Escalation {
  id             Int          @id @default(autoincrement())
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  consultationId Int          @unique
  reason         String
  assignedTo     Advisor?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId   Int?
  status         String       @default("pending") // pending, in_progress, resolved
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

// Encuestas de satisfacción
model SatisfactionSurvey {
  id             Int          @id @default(autoincrement())
  contact        Contact      @relation(fields: [contactId], references: [id])
  contactId      Int
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  consultationId Int          @unique
  rating         Int          // 1-5 estrellas
  comments       String?
  createdAt      DateTime     @default(now())
}

// Catálogo de productos
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  category    String   // juguetes, lubricantes, lenceria, etc
  description String
  price       Float?
  inStock     Boolean  @default(true)
  tags        String?  // JSON string con tags para búsqueda
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems  OrderItem[]
}

// Pedidos/Ventas
model Order {
  id                Int         @id @default(autoincrement())
  contact           Contact     @relation(fields: [contactId], references: [id])
  contactId         Int
  session           Session?    @relation(fields: [sessionId], references: [id])
  sessionId         Int?
  
  // Productos y totales
  items             OrderItem[]
  subtotal          Float       // Suma de productos
  shippingCost      Float       @default(0) // $16.000 envío o $0 recoger
  total             Float       // subtotal + shippingCost
  
  // Método de entrega
  deliveryMethod    String      // "pickup" o "shipping"
  
  // Datos para envío (si aplica)
  recipientName     String?
  recipientDocument String?     // Cédula
  shippingAddress   String?
  shippingCity      String?
  
  // Estado del pedido
  status            String      @default("pending_payment") // pending_payment, payment_received, confirmed, shipped, completed, cancelled
  paymentProofUrl   String?     // URL de imagen del comprobante
  
  // Timestamps
  createdAt         DateTime    @default(now())
  paidAt            DateTime?
  completedAt       DateTime?
  
  notes             String?     // Notas del agente
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  
  quantity  Int     @default(1)
  unitPrice Float   // Precio al momento de la compra
  subtotal  Float   // quantity * unitPrice
}
