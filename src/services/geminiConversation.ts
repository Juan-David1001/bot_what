/**
 * Servicio de conversaci√≥n persistente con Gemini
 * Mantiene el historial de conversaci√≥n para interacci√≥n continua
 */

import { queryGeminiChat } from './gemini';

interface ConversationMessage {
  role: 'user' | 'model'; // Gemini usa 'model' en lugar de 'assistant'
  content: string;
}

interface ConversationHistory {
  threadId: string;
  messages: ConversationMessage[];
  systemPrompt: string;
  schemaSent?: boolean;
  mode?: 'bot' | 'human';
  assignedAgentId?: string | null;
  handoffReason?: string | null;
}

// Almac√©n en memoria para historiales (en producci√≥n usar Redis o DB)
const conversations = new Map<string, ConversationHistory>();

// Prompt base del sistema para el asistente. Indica claramente el dominio (sex shop)
const SYSTEM_PROMPT = `Eres un asistente profesional y amable de la sex shop "Euforia Erotismo a t√∫ alcance
üçíLencer√≠a üî•s‚Ç¨x shop
üõµDomicilios üá®üá¥env√≠os Nacionales
üìû (57) 313 744 7166
calle 49#50-31, San Pedro de los Milagros" en l√≠nea. Tu rol es:

- Atender consultas sobre productos de manera profesional
- Dar recomendaciones personalizadas seg√∫n las necesidades del cliente
- Proporcionar informaci√≥n sobre uso, caracter√≠sticas y disponibilidad de productos
- Mantener la privacidad y confidencialidad del cliente
- Ser breve y conciso en tus respuestas (m√°ximo 2-3 p√°rrafos)
- NO gestionar pagos ni facturaci√≥n directamente

Responde siempre en espa√±ol de forma natural y conversacional.

REGLAS CR√çTICAS:
1. Los datos del cat√°logo (nombres exactos, precios, disponibilidad) vienen EXCLUSIVAMENTE de la secci√≥n "Contexto externo".
2. NUNCA inventes productos, precios o disponibilidad que no est√©n en el "Contexto externo".
3. PUEDES y DEBES usar tu conocimiento general para:
   - Explicar caracter√≠sticas t√©cnicas y beneficios de los productos del cat√°logo
   - Dar recomendaciones de uso, cuidado y limpieza
   - Sugerir combinaciones de productos
   - Responder dudas sobre seguridad y materiales
   - Ofrecer informaci√≥n educativa sobre productos similares
4. Combina datos exactos del cat√°logo con tu conocimiento para dar respuestas completas y √∫tiles.
5. Si no hay "Contexto externo" o est√° vac√≠o, indica que no encontraste informaci√≥n espec√≠fica en el cat√°logo pero puedes dar orientaci√≥n general si el usuario pregunta sobre un tipo de producto.
6. Devuelve siempre texto plano (sin bloques de c√≥digo ni JSON) y sin explicaciones t√©cnicas.
7. NO uses negritas, asteriscos, guiones de Markdown, encabezados, ni formato Markdown alguno. Devuelve solo texto plano.
8. NO empieces respuestas con saludos adicionales si la conversaci√≥n ya est√° en curso; responde directamente a la pregunta del usuario, a menos que el usuario haya saludado expl√≠citamente y sea la primera interacci√≥n.
9. Si el "Contexto externo" comienza con la l√≠nea 'NO_EXACT_MATCH', interpreta que no hay coincidencias exactas. En ese caso:
  - Responde de forma emp√°tica y √∫til, NO repitas literalmente "No se encontraron resultados".
  - Ofrece alternativas concretas (productos similares, categor√≠as relevantes o productos populares) usando la informaci√≥n incluida en el "Contexto externo".
  - Si no hay alternativas en el cat√°logo, ofrece orientaci√≥n general, sugiere t√©rminos de b√∫squeda o pregunta por preferencias (material, tama√±o, intensidad).

FORMATO DE SALIDA REQUERIDO (usar exactamente este estilo):

- Cuando el usuario pide productos (lista):
  - Encabezado breve (1 l√≠nea) que indique cu√°ntos resultados se muestran.
  - Lista numerada (1. ... 2. ...), m√°ximo 5 productos.
  - Cada elemento en la lista debe tener: Nombre ‚Äî Precio ‚Äî Disponibilidad ‚Äî Descripci√≥n corta (m√°x 100 caracteres).
  - Finalizar con una l√≠nea de cierre que ofrezca ayuda adicional: "¬øQuieres ver m√°s detalles o enlaces de alg√∫n producto?"

Ejemplo:
Resultados (3):
1. Vibrador Classic ‚Äî $29.99 ‚Äî Disponible ‚Äî Vibrador cl√°sico, silicona, 3 velocidades.
2. Lubricante water-based 100ml ‚Äî $9.99 ‚Äî Disponible ‚Äî Lubricante a base de agua, f√≥rmula suave.
3. Anillo vibrador ‚Äî $19.99 ‚Äî Agotado ‚Äî Anillo con vibraci√≥n para parejas, recargable.

¬øQuieres que te muestre m√°s detalles o enlaces de alg√∫n producto?

- Cuando el usuario pide categor√≠as:
  - Lista con vi√±etas de las categor√≠as disponibles.
Ejemplo:
Categor√≠as disponibles:
- juguetes
- lubricantes
- lenceria

¬øEn cu√°l de estas categor√≠as quieres que busque?

- Si no hay resultados:
  - Mensaje claro: "No se encontraron resultados para tu consulta en el cat√°logo. ¬øQuieres que busque con otro t√©rmino?"

Cumple estrictamente este formato para facilitar su presentaci√≥n en WhatsApp.
`;

// Prompts parametrizados seg√∫n el tipo de interacci√≥n
const GREETING_PROMPT = `Eres un asistente amigable y c√°lido de Euforia. Saluda al cliente con una bienvenida corta que mencione el nombre de la tienda (Euforia) y ofrece ayuda. Mant√©n un tono muy cordial y profesional.`;

const SERVICE_PROMPT = `Eres un asistente profesional y directo para atenci√≥n al cliente. Contesta la consulta de forma precisa y √∫til, ofreciendo recomendaciones si aplica. Mant√©n la privacidad del cliente.`;

function isGreetingText(text: string): boolean {
  if (!text) return false;
  const t = text.toLowerCase().trim();
  return /^(hola|buenas|buenos d√≠as|buenos dias|buenas tardes|buenas noches|buen d√≠a|buen dia|buenas)$/i.test(t) || /\b(hola|buenas|buenos d√≠as|buenos dias|buen d√≠a|buen dia)\b/.test(t);
}

/**
 * Inicializar o recuperar una conversaci√≥n
 * @param dbSchema - Schema de la base de datos (solo se pasa en primera inicializaci√≥n)
 */
export function getOrCreateConversation(threadId: string, dbSchema?: string): ConversationHistory {
  if (!conversations.has(threadId)) {
    console.log('getOrCreateConversation: nueva conversaci√≥n', threadId);
    
    // Construir system prompt con schema de DB para primera sesi√≥n
    let enhancedPrompt = SYSTEM_PROMPT;
    if (dbSchema) {
      enhancedPrompt = `${SYSTEM_PROMPT}

CONTEXTO INICIAL DE LA SESI√ìN:
Eres asistente de una sex shop. Tienes acceso al cat√°logo completo de productos a trav√©s de consultas SQL.

${dbSchema}

CAPACIDADES ESPECIALES:
1. Cuando el usuario pregunte por productos, se ejecutar√° autom√°ticamente una consulta SQL para obtener datos reales del cat√°logo.
2. Recibir√°s los resultados en la secci√≥n "Contexto externo" y debes usarlos EXACTAMENTE como vienen.
3. Adem√°s de los datos del cat√°logo, puedes usar tu conocimiento general sobre productos similares para:
   - Explicar mejor el uso y beneficios
   - Dar recomendaciones de cuidado y limpieza
   - Sugerir combinaciones de productos
   - Responder dudas sobre caracter√≠sticas t√©cnicas
   - Ofrecer consejos de uso seguro

IMPORTANTE: Combina la informaci√≥n exacta del cat√°logo (nombres, precios, disponibilidad) con tu conocimiento para dar respuestas completas y √∫tiles.`;
    }
    
    conversations.set(threadId, {
      threadId,
      systemPrompt: enhancedPrompt,
      messages: [],
      schemaSent: dbSchema ? false : true,
    });
  }
  return conversations.get(threadId)!;
}

/**
 * Agregar mensaje del usuario a la conversaci√≥n
 */
export function addUserMessage(threadId: string, content: string): void {
  const conversation = getOrCreateConversation(threadId);
  conversation.messages.push({ role: 'user', content });
  console.log('addUserMessage:', threadId, content.slice(0, 100));
}

/**
 * Agregar respuesta del asistente a la conversaci√≥n
 */
export function addAssistantMessage(threadId: string, content: string): void {
  const conversation = getOrCreateConversation(threadId);
  conversation.messages.push({ role: 'model', content });
  console.log('addAssistantMessage:', threadId, content.slice(0, 100));
}

/**
 * Consultar Gemini con historial completo de conversaci√≥n usando API nativa de chat
 */
export async function queryGeminiWithHistory(
  threadId: string,
  userMessage: string,
  options?: { mode?: 'greeting' | 'service'; externalContext?: string; dbSchema?: string },
): Promise<string> {
  const conversation = getOrCreateConversation(threadId, options?.dbSchema);

  // Si la conversaci√≥n est√° en handoff a humano, no generar respuesta autom√°tica
  if (conversation.mode === 'human') {
    const msg = 'La conversaci√≥n ha sido transferida a un agente humano. Tu mensaje ser√° atendido por un operador.';
    console.log(`queryGeminiWithHistory: thread=${threadId} en handoff, bot no responde.`);
    addAssistantMessage(threadId, msg);
    return msg;
  }

  // Agregar mensaje del usuario
  addUserMessage(threadId, userMessage);
  console.log('queryGeminiWithHistory:', threadId, 'msg:', userMessage.slice(0, 100));

  try {
    // Determinar modo: greeting vs service. Se puede forzar con options.mode
    const forceMode = options?.mode;
    const isGreetingMsg =
      forceMode === 'greeting' ||
      (forceMode !== 'service' && !conversation.schemaSent && conversation.messages.length <= 1 && isGreetingText(userMessage));

    const geminiMessages: Array<{ role: 'user' | 'model'; parts: string }> = [];

    if (isGreetingMsg) {
      // Primer mensaje de bienvenida ‚Äî usar prompt de saludo espec√≠fico
      geminiMessages.push({ role: 'user', parts: GREETING_PROMPT + '\n\n' + userMessage });
    } else {
      // Modo servicio ‚Äî construir historial completo y a√±adir el nuevo mensaje
      // En el PRIMER mensaje de servicio (despu√©s del saludo), incluir el system prompt con DB schema
      // En mensajes subsecuentes, solo incluir el contexto externo si existe
      // Si el schema a√∫n no fue enviado para esta conversaci√≥n, incluir system prompt completo (con DB schema si se proporcion√≥)
      if (!conversation.schemaSent) {
        const external = options?.externalContext ? '\n\nContexto externo:\n' + options.externalContext : '';
        geminiMessages.push({ role: 'user', parts: conversation.systemPrompt + external });
        // Marcar que ya enviamos el schema para no repetirlo
        conversation.schemaSent = true;
      } else {
        // Mensajes subsecuentes: s√≥lo contexto externo si existe, sin repetir system prompt
        if (options?.externalContext) {
          geminiMessages.push({ role: 'user', parts: 'Contexto externo:\n' + options.externalContext });
        }
      }
      
      for (const msg of conversation.messages) {
        geminiMessages.push({ role: msg.role, parts: msg.content });
      }
      geminiMessages.push({ role: 'user', parts: userMessage });
    }

    console.log('queryGeminiWithHistory: enviando', geminiMessages.length, 'mensajes a Gemini (greeting=', isGreetingMsg, ')');
    const assistantResponse = await queryGeminiChat(geminiMessages, process.env.GEMINI_MODEL ?? 'gemini-2.5-flash');

  console.log('queryGeminiWithHistory: respuesta cruda:', assistantResponse.slice(0, 200));
  // Sanitizar respuesta para eliminar markdown no deseado
  const cleaned = sanitizeResponse(assistantResponse);
  console.log('queryGeminiWithHistory: respuesta limpiada:', cleaned.slice(0, 200));
  addAssistantMessage(threadId, cleaned);
  return cleaned;
  } catch (error: any) {
    const errorMsg = 'Lo siento, tuve un problema al procesar tu mensaje. ¬øPodr√≠as intentarlo de nuevo?';
    console.error('queryGeminiWithHistory: error', error?.message ?? error);
    addAssistantMessage(threadId, errorMsg);
    return errorMsg;
  }
}

export { isGreetingText as isGreeting };

// Handoff helpers: pasar conversaci√≥n a humano y volver al bot
export function startHandoff(threadId: string, agentId?: string | null, reason?: string) {
  const conv = getOrCreateConversation(threadId);
  conv.mode = 'human';
  conv.assignedAgentId = agentId ?? null;
  conv.handoffReason = reason ?? null;
  console.log(`startHandoff: thread=${threadId} agent=${agentId} reason=${reason}`);
}

export function endHandoff(threadId: string) {
  const conv = getOrCreateConversation(threadId);
  conv.mode = 'bot';
  conv.assignedAgentId = null;
  conv.handoffReason = null;
  console.log(`endHandoff: thread=${threadId}`);
}

export function isInHandoff(threadId: string): boolean {
  const conv = conversations.get(threadId);
  return !!(conv && conv.mode === 'human');
}

/**
 * Elimina formatos Markdown simples (**, *, _, headings) y normaliza saltos de l√≠nea
 */
export function sanitizeResponse(text: string): string {
  if (!text) return text;
  let s = text;
  // Remove fenced code blocks
  s = s.replace(/```[\s\S]*?```/g, '');
  // Remove bold **text** and italics *text* and underscores
  s = s.replace(/\*\*(.*?)\*\*/gs, '$1');
  s = s.replace(/\*(.*?)\*/gs, '$1');
  s = s.replace(/__(.*?)__/gs, '$1');
  s = s.replace(/_(.*?)_/gs, '$1');
  // Remove markdown headings
  s = s.replace(/^#{1,6}\s*/gm, '');
  // Replace multiple blank lines with two
  s = s.replace(/\n{3,}/g, '\n\n');
  // Remove tab characters
  s = s.replace(/\t+/g, ' ');
  // Collapse multiple spaces
  s = s.replace(/ {2,}/g, ' ');
  // Trim
  s = s.trim();
  return s;
}

/**
 * Formatea la respuesta para mejorar presentaci√≥n en WhatsApp:
 * - Normaliza saltos de l√≠nea
 * - Agrega emojis por secciones (preguntas, seguridad, caracter√≠sticas, limpieza, etc.)
 * - Quita sangr√≠as y tabulaciones
 */
export function formatAssistantResponse(text: string): string {
  if (!text) return text;
  // Primero sanitizamos marcas y exceso de espacios
  let s = sanitizeResponse(text);

  // Detectar tablas Markdown de comparaci√≥n y convertirlas a formato amigable de chat
  function parseTableToComparison(input: string): string | null {
    const lines = input.split(/\r?\n/).map((l) => l.trim()).filter(Boolean);
    // Keep only lines that contain '|' and are not just separators
    const tableLines = lines.filter((l) => l.includes('|'));
    if (tableLines.length < 2) return null;

    // Normalize: remove possible leading/trailing pipes
    const rows = tableLines.map((l) => {
      let row = l;
      if (row.startsWith('|')) row = row.slice(1);
      if (row.endsWith('|')) row = row.slice(0, -1);
      return row.split('|').map((c) => c.trim());
    });

    // Detect header row and separator (like ---)
    const header = rows[0];
    const hasSeparator = rows[1] && rows[1].every((cell) => /^:?-{2,}:?$/.test(cell));
    const dataRows = hasSeparator ? rows.slice(2) : rows.slice(1);
    if (header.length < 2 || dataRows.length === 0) return null;

    // Build comparison text
    const title = header.slice(1).join(' vs ');
    let out = `üîé Comparaci√≥n: ${title}\n\n`;
    for (const r of dataRows) {
      const key = r[0] || 'Caracter√≠stica';
      out += `‚Ä¢ ${key}\n`;
      for (let i = 1; i < header.length; i++) {
        const pName = header[i] || `Producto ${i}`;
        const cell = r[i] ?? '-';
        // Shorten long cell content
        const cellText = cell.length > 220 ? cell.slice(0, 217) + '...' : cell;
        out += `  - ${pName}: ${cellText}\n`;
      }
      out += `\n`;
    }
    return out.trim();
  }

  const tableConverted = parseTableToComparison(s);
  if (tableConverted) {
    // Use converted table as starting text to format further
    s = tableConverted;
  }

  // Normalizar saltos de l√≠nea a doble salto entre p√°rrafos
  s = s.replace(/\n{2,}/g, '\n\n');

  // Dividir por l√≠neas y procesar cada una
  const lines = s.split(/\n/).map((l) => l.trim()).filter((l) => l.length > 0);
  const out: string[] = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Detectar t√≠tulo de producto (l√≠nea corta en may√∫sculas o Title Case)
    if (/^[A-Z√Å√â√ç√ì√ö√ë][A-Za-z√Å√â√ç√ì√ö√±√°√©√≠√≥√∫√º0-9\s\-]{2,60}$/.test(line) && line.split(' ').length <= 5) {
      out.push(`üîπ ${line}`);
      continue;
    }

    // Preguntas (¬ø ... ?)
    if (/^¬ø.*\?$/.test(line) || /^\?.*\?$/.test(line)) {
      out.push(`‚ùì ${line}`);
      continue;
    }

    // Secciones comunes con emojis
    const lower = line.toLowerCase();
    if (lower.startsWith('seguridad') || lower.includes('seguridad') || lower.includes('salud')) {
      out.push(`üõ°Ô∏è ${line}`);
      continue;
    }
    if (lower.includes('suavidad') || lower.includes('suave') || lower.includes('tacto')) {
      out.push(`ü§ç ${line}`);
      continue;
    }
    if (lower.includes('durabil') || lower.includes('duradero') || lower.includes('durabilidad')) {
      out.push(`‚è≥ ${line}`);
      continue;
    }
    if (lower.includes('limpiar') || lower.includes('limpieza') || lower.includes('higi√©n')) {
      out.push(`üßº ${line}`);
      continue;
    }
    if (lower.includes('lubricant') || lower.includes('lubricant') || lower.includes('lubricant')) {
      out.push(`üíß ${line}`);
      continue;
    }
    if (lower.includes('veloc') || lower.includes('modo') || lower.includes('vibracion') || lower.includes('velocidades')) {
      out.push(`‚ö° ${line}`);
      continue;
    }
    if (lower.includes('dise√±') || lower.includes('ergon') || lower.includes('dise√±o')) {
      out.push(`üéØ ${line}`);
      continue;
    }

    // CTA final
    if (i === lines.length - 1 && /\b(duda|pregunta|ayuda|¬ø|quieres)\b/i.test(line)) {
      out.push(`‚ùì ${line}`);
      continue;
    }

    // Por defecto, mantener la l√≠nea
    out.push(line);
  }

  // Reunir en p√°rrafos: separar con doble salto de l√≠nea cada bloque detectado
  // Adem√°s, unir l√≠neas cortas que pertenecen a la misma idea
  const paragraphs: string[] = [];
  let current: string[] = [];
  for (const ln of out) {
    // Si la l√≠nea es un t√≠tulo o empieza con emoji, considera nueva l√≠nea
    if (/^[^a-z0-9]/i.test(ln) || ln.startsWith('üîπ')) {
      if (current.length > 0) {
        paragraphs.push(current.join(' '));
        current = [];
      }
      paragraphs.push(ln);
      continue;
    }
    // Si la l√≠nea est√° en may√∫scula inicial y corta, tambi√©n separa
    if (ln.length < 60 && /^[A-Z√Å√â√ç√ì√ö√ë]/.test(ln)) {
      if (current.length > 0) {
        paragraphs.push(current.join(' '));
        current = [];
      }
      paragraphs.push(ln);
      continue;
    }
    current.push(ln);
  }
  if (current.length > 0) paragraphs.push(current.join(' '));

  // Unir p√°rrafos con doble salto
  const finalText = paragraphs.join('\n\n').replace(/\n{3,}/g, '\n\n').trim();
  return finalText;
}

/**
 * Obtener historial completo de conversaci√≥n
 */
export function getConversationHistory(threadId: string): Array<{ role: string; content: string }> {
  const conversation = conversations.get(threadId);
  return conversation?.messages ?? [];
}

/**
 * Limpiar conversaci√≥n (al cerrar sesi√≥n)
 */
export function clearConversation(threadId: string): void {
  conversations.delete(threadId);
}

/**
 * Clasificar autom√°ticamente la consulta usando IA
 */
export function classifyConsultation(message: string): string {
  const lowerMessage = message.toLowerCase();

  if (
    lowerMessage.includes('producto') ||
    lowerMessage.includes('precio') ||
    lowerMessage.includes('stock') ||
    lowerMessage.includes('disponible')
  ) {
    return 'producto';
  }

  if (
    lowerMessage.includes('recomiend') ||
    lowerMessage.includes('sugerir') ||
    lowerMessage.includes('cual') ||
    lowerMessage.includes('mejor')
  ) {
    return 'recomendacion';
  }

  if (
    lowerMessage.includes('como us') ||
    lowerMessage.includes('instruc') ||
    lowerMessage.includes('manual') ||
    lowerMessage.includes('funciona')
  ) {
    return 'soporte_uso';
  }

  if (
    lowerMessage.includes('queja') ||
    lowerMessage.includes('reclam') ||
    lowerMessage.includes('problema') ||
    lowerMessage.includes('sugerencia')
  ) {
    return 'queja_sugerencia';
  }

  return 'producto'; // default
}
